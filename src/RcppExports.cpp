// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// base_fit
arma::vec base_fit(double a, double b, const arma::uvec& emp_vec);
RcppExport SEXP _hmod_base_fit(SEXP aSEXP, SEXP bSEXP, SEXP emp_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type emp_vec(emp_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(base_fit(a, b, emp_vec));
    return rcpp_result_gen;
END_RCPP
}
// base_pay_sim
arma::vec base_pay_sim(const arma::vec& base_pay_empirical, int n_sim);
RcppExport SEXP _hmod_base_pay_sim(SEXP base_pay_empiricalSEXP, SEXP n_simSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_empirical(base_pay_empiricalSEXP);
    Rcpp::traits::input_parameter< int >::type n_sim(n_simSEXP);
    rcpp_result_gen = Rcpp::wrap(base_pay_sim(base_pay_empirical, n_sim));
    return rcpp_result_gen;
END_RCPP
}
// base_pay_sim_beta
arma::vec base_pay_sim_beta(const arma::vec& base_pay_empirical, const arma::vec& beta_empirical, const arma::vec& beta_simulated);
RcppExport SEXP _hmod_base_pay_sim_beta(SEXP base_pay_empiricalSEXP, SEXP beta_empiricalSEXP, SEXP beta_simulatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_empirical(base_pay_empiricalSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_empirical(beta_empiricalSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_simulated(beta_simulatedSEXP);
    rcpp_result_gen = Rcpp::wrap(base_pay_sim_beta(base_pay_empirical, beta_empirical, beta_simulated));
    return rcpp_result_gen;
END_RCPP
}
// beta_sim
arma::vec beta_sim(const arma::uvec& employment, const arma::vec& beta, const arma::uvec& sim_employment, double bin_factor);
RcppExport SEXP _hmod_beta_sim(SEXP employmentSEXP, SEXP betaSEXP, SEXP sim_employmentSEXP, SEXP bin_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type employment(employmentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sim_employment(sim_employmentSEXP);
    Rcpp::traits::input_parameter< double >::type bin_factor(bin_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_sim(employment, beta, sim_employment, bin_factor));
    return rcpp_result_gen;
END_RCPP
}
// boot_sigma
double boot_sigma(arma::vec x);
RcppExport SEXP _hmod_boot_sigma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sigma(x));
    return rcpp_result_gen;
END_RCPP
}
// boot_span
arma::vec boot_span(arma::vec h, arma::vec s);
RcppExport SEXP _hmod_boot_span(SEXP hSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_span(h, s));
    return rcpp_result_gen;
END_RCPP
}
// ceo_pay_ratio
arma::vec ceo_pay_ratio(double a, double b, const arma::vec& base_employment_vec, const arma::uvec& total_employment_vec, const arma::vec& base_pay_vec, const arma::vec& beta_vec);
RcppExport SEXP _hmod_ceo_pay_ratio(SEXP aSEXP, SEXP bSEXP, SEXP base_employment_vecSEXP, SEXP total_employment_vecSEXP, SEXP base_pay_vecSEXP, SEXP beta_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_employment_vec(base_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type total_employment_vec(total_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vec(beta_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(ceo_pay_ratio(a, b, base_employment_vec, total_employment_vec, base_pay_vec, beta_vec));
    return rcpp_result_gen;
END_RCPP
}
// firm_grid
arma::imat firm_grid(arma::vec base_vec, int stretch);
RcppExport SEXP _hmod_firm_grid(SEXP base_vecSEXP, SEXP stretchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type base_vec(base_vecSEXP);
    Rcpp::traits::input_parameter< int >::type stretch(stretchSEXP);
    rcpp_result_gen = Rcpp::wrap(firm_grid(base_vec, stretch));
    return rcpp_result_gen;
END_RCPP
}
// firm_mean_pay
arma::vec firm_mean_pay(double a, double b, const arma::vec& base_employment_vec, const arma::uvec& total_employment_vec, const arma::vec& base_pay_vec, const arma::vec& beta_vec);
RcppExport SEXP _hmod_firm_mean_pay(SEXP aSEXP, SEXP bSEXP, SEXP base_employment_vecSEXP, SEXP total_employment_vecSEXP, SEXP base_pay_vecSEXP, SEXP beta_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_employment_vec(base_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type total_employment_vec(total_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vec(beta_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(firm_mean_pay(a, b, base_employment_vec, total_employment_vec, base_pay_vec, beta_vec));
    return rcpp_result_gen;
END_RCPP
}
// fit_beta
arma::mat fit_beta(double a, double b, const arma::vec& base_employment_vec, const arma::uvec& total_employment_vec, const arma::vec& ceo_ratio_vec, const arma::vec& firm_mean_pay_vec, double ceo_ratio_error_tolerance, double min_beta, double max_beta);
RcppExport SEXP _hmod_fit_beta(SEXP aSEXP, SEXP bSEXP, SEXP base_employment_vecSEXP, SEXP total_employment_vecSEXP, SEXP ceo_ratio_vecSEXP, SEXP firm_mean_pay_vecSEXP, SEXP ceo_ratio_error_toleranceSEXP, SEXP min_betaSEXP, SEXP max_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_employment_vec(base_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type total_employment_vec(total_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ceo_ratio_vec(ceo_ratio_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type firm_mean_pay_vec(firm_mean_pay_vecSEXP);
    Rcpp::traits::input_parameter< double >::type ceo_ratio_error_tolerance(ceo_ratio_error_toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type min_beta(min_betaSEXP);
    Rcpp::traits::input_parameter< double >::type max_beta(max_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_beta(a, b, base_employment_vec, total_employment_vec, ceo_ratio_vec, firm_mean_pay_vec, ceo_ratio_error_tolerance, min_beta, max_beta));
    return rcpp_result_gen;
END_RCPP
}
// fit_r
arma::mat fit_r(double a, double b, const arma::vec& base_emp_vec, const arma::uvec& emp_vec, const arma::vec& c_r_vec, const arma::vec& m_pay_vec, double tol);
RcppExport SEXP _hmod_fit_r(SEXP aSEXP, SEXP bSEXP, SEXP base_emp_vecSEXP, SEXP emp_vecSEXP, SEXP c_r_vecSEXP, SEXP m_pay_vecSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_emp_vec(base_emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_r_vec(c_r_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_pay_vec(m_pay_vecSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_r(a, b, base_emp_vec, emp_vec, c_r_vec, m_pay_vec, tol));
    return rcpp_result_gen;
END_RCPP
}
// gini
double gini(arma::vec x, bool corr);
RcppExport SEXP _hmod_gini(SEXP xSEXP, SEXP corrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type corr(corrSEXP);
    rcpp_result_gen = Rcpp::wrap(gini(x, corr));
    return rcpp_result_gen;
END_RCPP
}
// grid_plot_beta
arma::mat grid_plot_beta(double a, double b, double sigma, arma::umat firm_grid, arma::vec emp_vec, arma::vec base_vec, arma::vec base_pay_vec, arma::vec beta_vec);
RcppExport SEXP _hmod_grid_plot_beta(SEXP aSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP firm_gridSEXP, SEXP emp_vecSEXP, SEXP base_vecSEXP, SEXP base_pay_vecSEXP, SEXP beta_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type firm_grid(firm_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_vec(base_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_vec(beta_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_plot_beta(a, b, sigma, firm_grid, emp_vec, base_vec, base_pay_vec, beta_vec));
    return rcpp_result_gen;
END_RCPP
}
// grid_plot_r
arma::mat grid_plot_r(double a, double b, double sigma, arma::umat firm_grid, arma::vec base_vec, arma::vec base_pay_vec, arma::vec r_vec);
RcppExport SEXP _hmod_grid_plot_r(SEXP aSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP firm_gridSEXP, SEXP base_vecSEXP, SEXP base_pay_vecSEXP, SEXP r_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type firm_grid(firm_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_vec(base_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r_vec(r_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_plot_r(a, b, sigma, firm_grid, base_vec, base_pay_vec, r_vec));
    return rcpp_result_gen;
END_RCPP
}
// hierarchical_power
arma::vec hierarchical_power(arma::uvec hierarchy_vec);
RcppExport SEXP _hmod_hierarchical_power(SEXP hierarchy_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type hierarchy_vec(hierarchy_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(hierarchical_power(hierarchy_vec));
    return rcpp_result_gen;
END_RCPP
}
// k_function
arma::vec k_function(arma::vec pay, arma::vec power, arma::mat k_parameters);
RcppExport SEXP _hmod_k_function(SEXP paySEXP, SEXP powerSEXP, SEXP k_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pay(paySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type power(powerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type k_parameters(k_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(k_function(pay, power, k_parameters));
    return rcpp_result_gen;
END_RCPP
}
// lorenz
arma::mat lorenz(arma::vec pay, double lower, double upper, int n_bins);
RcppExport SEXP _hmod_lorenz(SEXP paySEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pay(paySEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(lorenz(pay, lower, upper, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// model_beta
arma::mat model_beta(double a, double b, const arma::vec& base_emp_vec, const arma::uvec& emp_vec, const arma::vec& base_pay_vec, const arma::vec& beta_vec, double sigma, bool firm_size, bool hierarchy, bool power);
RcppExport SEXP _hmod_model_beta(SEXP aSEXP, SEXP bSEXP, SEXP base_emp_vecSEXP, SEXP emp_vecSEXP, SEXP base_pay_vecSEXP, SEXP beta_vecSEXP, SEXP sigmaSEXP, SEXP firm_sizeSEXP, SEXP hierarchySEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_emp_vec(base_emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type firm_size(firm_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type hierarchy(hierarchySEXP);
    Rcpp::traits::input_parameter< bool >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(model_beta(a, b, base_emp_vec, emp_vec, base_pay_vec, beta_vec, sigma, firm_size, hierarchy, power));
    return rcpp_result_gen;
END_RCPP
}
// model_r
arma::mat model_r(double a, double b, const arma::vec& base_emp_vec, const arma::uvec& emp_vec, const arma::vec& base_pay_vec, const arma::vec& r_vec, double sigma, bool firm_size, bool hierarchy, bool power);
RcppExport SEXP _hmod_model_r(SEXP aSEXP, SEXP bSEXP, SEXP base_emp_vecSEXP, SEXP emp_vecSEXP, SEXP base_pay_vecSEXP, SEXP r_vecSEXP, SEXP sigmaSEXP, SEXP firm_sizeSEXP, SEXP hierarchySEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_emp_vec(base_emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type firm_size(firm_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type hierarchy(hierarchySEXP);
    Rcpp::traits::input_parameter< bool >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(model_r(a, b, base_emp_vec, emp_vec, base_pay_vec, r_vec, sigma, firm_size, hierarchy, power));
    return rcpp_result_gen;
END_RCPP
}
// project
arma::mat project(arma::mat a, arma::vec c, arma::vec theta, arma::vec e);
RcppExport SEXP _hmod_project(SEXP aSEXP, SEXP cSEXP, SEXP thetaSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(project(a, c, theta, e));
    return rcpp_result_gen;
END_RCPP
}
// rpld
arma::uvec rpld(int n, int xmin, double alpha, int discrete_max, int xmax, bool ordered);
RcppExport SEXP _hmod_rpld(SEXP nSEXP, SEXP xminSEXP, SEXP alphaSEXP, SEXP discrete_maxSEXP, SEXP xmaxSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type discrete_max(discrete_maxSEXP);
    Rcpp::traits::input_parameter< int >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(rpld(n, xmin, alpha, discrete_max, xmax, ordered));
    return rcpp_result_gen;
END_RCPP
}
// top_frac
double top_frac(arma::vec pay, double frac);
RcppExport SEXP _hmod_top_frac(SEXP paySEXP, SEXP fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pay(paySEXP);
    Rcpp::traits::input_parameter< double >::type frac(fracSEXP);
    rcpp_result_gen = Rcpp::wrap(top_frac(pay, frac));
    return rcpp_result_gen;
END_RCPP
}
// top_k
arma::rowvec top_k(const arma::vec& pay, const arma::vec& emp, int k);
RcppExport SEXP _hmod_top_k(SEXP paySEXP, SEXP empSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pay(paySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type emp(empSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(top_k(pay, emp, k));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mean
double weighted_mean(arma::vec x, arma::vec weights);
RcppExport SEXP _hmod_weighted_mean(SEXP xSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mean(x, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hmod_base_fit", (DL_FUNC) &_hmod_base_fit, 3},
    {"_hmod_base_pay_sim", (DL_FUNC) &_hmod_base_pay_sim, 2},
    {"_hmod_base_pay_sim_beta", (DL_FUNC) &_hmod_base_pay_sim_beta, 3},
    {"_hmod_beta_sim", (DL_FUNC) &_hmod_beta_sim, 4},
    {"_hmod_boot_sigma", (DL_FUNC) &_hmod_boot_sigma, 1},
    {"_hmod_boot_span", (DL_FUNC) &_hmod_boot_span, 2},
    {"_hmod_ceo_pay_ratio", (DL_FUNC) &_hmod_ceo_pay_ratio, 6},
    {"_hmod_firm_grid", (DL_FUNC) &_hmod_firm_grid, 2},
    {"_hmod_firm_mean_pay", (DL_FUNC) &_hmod_firm_mean_pay, 6},
    {"_hmod_fit_beta", (DL_FUNC) &_hmod_fit_beta, 9},
    {"_hmod_fit_r", (DL_FUNC) &_hmod_fit_r, 7},
    {"_hmod_gini", (DL_FUNC) &_hmod_gini, 2},
    {"_hmod_grid_plot_beta", (DL_FUNC) &_hmod_grid_plot_beta, 8},
    {"_hmod_grid_plot_r", (DL_FUNC) &_hmod_grid_plot_r, 7},
    {"_hmod_hierarchical_power", (DL_FUNC) &_hmod_hierarchical_power, 1},
    {"_hmod_k_function", (DL_FUNC) &_hmod_k_function, 3},
    {"_hmod_lorenz", (DL_FUNC) &_hmod_lorenz, 4},
    {"_hmod_model_beta", (DL_FUNC) &_hmod_model_beta, 10},
    {"_hmod_model_r", (DL_FUNC) &_hmod_model_r, 10},
    {"_hmod_project", (DL_FUNC) &_hmod_project, 4},
    {"_hmod_rpld", (DL_FUNC) &_hmod_rpld, 6},
    {"_hmod_top_frac", (DL_FUNC) &_hmod_top_frac, 2},
    {"_hmod_top_k", (DL_FUNC) &_hmod_top_k, 3},
    {"_hmod_weighted_mean", (DL_FUNC) &_hmod_weighted_mean, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hmod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
