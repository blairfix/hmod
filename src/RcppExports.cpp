// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// base_fit
NumericVector base_fit(double a, double b, NumericVector emp_vec);
RcppExport SEXP _hmod_base_fit(SEXP aSEXP, SEXP bSEXP, SEXP emp_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emp_vec(emp_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(base_fit(a, b, emp_vec));
    return rcpp_result_gen;
END_RCPP
}
// base_pay_sim
NumericVector base_pay_sim(NumericVector base_empirical, int n_sim);
RcppExport SEXP _hmod_base_pay_sim(SEXP base_empiricalSEXP, SEXP n_simSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type base_empirical(base_empiricalSEXP);
    Rcpp::traits::input_parameter< int >::type n_sim(n_simSEXP);
    rcpp_result_gen = Rcpp::wrap(base_pay_sim(base_empirical, n_sim));
    return rcpp_result_gen;
END_RCPP
}
// base_sim
NumericVector base_sim(NumericVector base_empirical, int n_sim);
RcppExport SEXP _hmod_base_sim(SEXP base_empiricalSEXP, SEXP n_simSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type base_empirical(base_empiricalSEXP);
    Rcpp::traits::input_parameter< int >::type n_sim(n_simSEXP);
    rcpp_result_gen = Rcpp::wrap(base_sim(base_empirical, n_sim));
    return rcpp_result_gen;
END_RCPP
}
// boot_sigma
double boot_sigma(NumericVector x);
RcppExport SEXP _hmod_boot_sigma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_sigma(x));
    return rcpp_result_gen;
END_RCPP
}
// boot_span
NumericVector boot_span(arma::vec h, arma::vec s);
RcppExport SEXP _hmod_boot_span(SEXP hSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_span(h, s));
    return rcpp_result_gen;
END_RCPP
}
// fast_mean
double fast_mean(NumericVector x);
RcppExport SEXP _hmod_fast_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// fastgini
double fastgini(NumericVector x, bool corr);
RcppExport SEXP _hmod_fastgini(SEXP xSEXP, SEXP corrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type corr(corrSEXP);
    rcpp_result_gen = Rcpp::wrap(fastgini(x, corr));
    return rcpp_result_gen;
END_RCPP
}
// firm_grid
arma::imat firm_grid(arma::vec base_vec, int stretch);
RcppExport SEXP _hmod_firm_grid(SEXP base_vecSEXP, SEXP stretchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type base_vec(base_vecSEXP);
    Rcpp::traits::input_parameter< int >::type stretch(stretchSEXP);
    rcpp_result_gen = Rcpp::wrap(firm_grid(base_vec, stretch));
    return rcpp_result_gen;
END_RCPP
}
// fit_beta
arma::mat fit_beta(double a, double b, const arma::vec& base_employment_vec, const arma::uvec& total_employment_vec, const arma::vec& ceo_ratio_vec, const arma::vec& firm_mean_pay_vec, double ceo_ratio_error_tolerance);
RcppExport SEXP _hmod_fit_beta(SEXP aSEXP, SEXP bSEXP, SEXP base_employment_vecSEXP, SEXP total_employment_vecSEXP, SEXP ceo_ratio_vecSEXP, SEXP firm_mean_pay_vecSEXP, SEXP ceo_ratio_error_toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type base_employment_vec(base_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type total_employment_vec(total_employment_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ceo_ratio_vec(ceo_ratio_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type firm_mean_pay_vec(firm_mean_pay_vecSEXP);
    Rcpp::traits::input_parameter< double >::type ceo_ratio_error_tolerance(ceo_ratio_error_toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_beta(a, b, base_employment_vec, total_employment_vec, ceo_ratio_vec, firm_mean_pay_vec, ceo_ratio_error_tolerance));
    return rcpp_result_gen;
END_RCPP
}
// fit_model
NumericMatrix fit_model(double a, double b, NumericVector base_emp_vec, IntegerVector emp_vec, NumericVector c_r_vec, NumericVector m_pay_vec, double tol);
RcppExport SEXP _hmod_fit_model(SEXP aSEXP, SEXP bSEXP, SEXP base_emp_vecSEXP, SEXP emp_vecSEXP, SEXP c_r_vecSEXP, SEXP m_pay_vecSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type base_emp_vec(base_emp_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_r_vec(c_r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m_pay_vec(m_pay_vecSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_model(a, b, base_emp_vec, emp_vec, c_r_vec, m_pay_vec, tol));
    return rcpp_result_gen;
END_RCPP
}
// grid_plot
arma::mat grid_plot(double a, double b, double sigma, arma::umat firm_grid, arma::vec base_vec, arma::vec base_pay_vec, arma::vec r_vec);
RcppExport SEXP _hmod_grid_plot(SEXP aSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP firm_gridSEXP, SEXP base_vecSEXP, SEXP base_pay_vecSEXP, SEXP r_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type firm_grid(firm_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_vec(base_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r_vec(r_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_plot(a, b, sigma, firm_grid, base_vec, base_pay_vec, r_vec));
    return rcpp_result_gen;
END_RCPP
}
// lorenz
arma::mat lorenz(arma::vec pay, double lower, double upper, int n_bins);
RcppExport SEXP _hmod_lorenz(SEXP paySEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pay(paySEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(lorenz(pay, lower, upper, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// model
NumericMatrix model(double a, double b, NumericVector base_emp_vec, IntegerVector emp_vec, NumericVector base_pay_vec, NumericVector r_vec, double sigma, bool firm_size, bool hierarchy, bool power);
RcppExport SEXP _hmod_model(SEXP aSEXP, SEXP bSEXP, SEXP base_emp_vecSEXP, SEXP emp_vecSEXP, SEXP base_pay_vecSEXP, SEXP r_vecSEXP, SEXP sigmaSEXP, SEXP firm_sizeSEXP, SEXP hierarchySEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type base_emp_vec(base_emp_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emp_vec(emp_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type base_pay_vec(base_pay_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type firm_size(firm_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type hierarchy(hierarchySEXP);
    Rcpp::traits::input_parameter< bool >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(model(a, b, base_emp_vec, emp_vec, base_pay_vec, r_vec, sigma, firm_size, hierarchy, power));
    return rcpp_result_gen;
END_RCPP
}
// project
arma::mat project(arma::mat a, arma::vec c, arma::vec theta, arma::vec e);
RcppExport SEXP _hmod_project(SEXP aSEXP, SEXP cSEXP, SEXP thetaSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(project(a, c, theta, e));
    return rcpp_result_gen;
END_RCPP
}
// rpld
IntegerVector rpld(int n, int xmin, double alpha, int discrete_max, int xmax, bool ordered);
RcppExport SEXP _hmod_rpld(SEXP nSEXP, SEXP xminSEXP, SEXP alphaSEXP, SEXP discrete_maxSEXP, SEXP xmaxSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type discrete_max(discrete_maxSEXP);
    Rcpp::traits::input_parameter< int >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(rpld(n, xmin, alpha, discrete_max, xmax, ordered));
    return rcpp_result_gen;
END_RCPP
}
// top
double top(NumericVector pay, double frac);
RcppExport SEXP _hmod_top(SEXP paySEXP, SEXP fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pay(paySEXP);
    Rcpp::traits::input_parameter< double >::type frac(fracSEXP);
    rcpp_result_gen = Rcpp::wrap(top(pay, frac));
    return rcpp_result_gen;
END_RCPP
}
// top_k
IntegerVector top_k(NumericVector pay, IntegerVector emp, int k);
RcppExport SEXP _hmod_top_k(SEXP paySEXP, SEXP empSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pay(paySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emp(empSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(top_k(pay, emp, k));
    return rcpp_result_gen;
END_RCPP
}
// w_mean
double w_mean(NumericVector x, NumericVector w);
RcppExport SEXP _hmod_w_mean(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(w_mean(x, w));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hmod_base_fit", (DL_FUNC) &_hmod_base_fit, 3},
    {"_hmod_base_pay_sim", (DL_FUNC) &_hmod_base_pay_sim, 2},
    {"_hmod_base_sim", (DL_FUNC) &_hmod_base_sim, 2},
    {"_hmod_boot_sigma", (DL_FUNC) &_hmod_boot_sigma, 1},
    {"_hmod_boot_span", (DL_FUNC) &_hmod_boot_span, 2},
    {"_hmod_fast_mean", (DL_FUNC) &_hmod_fast_mean, 1},
    {"_hmod_fastgini", (DL_FUNC) &_hmod_fastgini, 2},
    {"_hmod_firm_grid", (DL_FUNC) &_hmod_firm_grid, 2},
    {"_hmod_fit_beta", (DL_FUNC) &_hmod_fit_beta, 7},
    {"_hmod_fit_model", (DL_FUNC) &_hmod_fit_model, 7},
    {"_hmod_grid_plot", (DL_FUNC) &_hmod_grid_plot, 7},
    {"_hmod_lorenz", (DL_FUNC) &_hmod_lorenz, 4},
    {"_hmod_model", (DL_FUNC) &_hmod_model, 10},
    {"_hmod_project", (DL_FUNC) &_hmod_project, 4},
    {"_hmod_rpld", (DL_FUNC) &_hmod_rpld, 6},
    {"_hmod_top", (DL_FUNC) &_hmod_top, 2},
    {"_hmod_top_k", (DL_FUNC) &_hmod_top_k, 3},
    {"_hmod_w_mean", (DL_FUNC) &_hmod_w_mean, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hmod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
